"""
Django settings for curriculum_miri project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os #The OS module in Python provides functions for interacting with the operating system
from decouple import config, Csv #Decouple helps you to organize your settings so that you can change parameters without having to redeploy your app.
#decouple ayuda a manejar los archivos .env;
#Envvars works, but since os.environ only returns strings, it’s tricky.
#Decouple provides a solution that doesn’t look like a workaround: config('DEBUG', cast=bool).
from django import conf 
#The conf module is used for managing Django's settings. 
# It provides a settings object that represents the settings for the current Django project. 
# You can use this object to access the values of the settings defined in your project's settings.py file.
#For example, you can access the value of the DEBUG setting by importing settings from django.conf and accessing the DEBUG attribute of the settings object


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(
    os.path.dirname(os.path.abspath(__file__))))
#-- __file__ is a built-in variable that contains the path of the current file. os.path.abspath(__file__) returns the absolute path of the current file.
# os.path.dirname(path) returns the directory name of a path. So os.path.dirname(os.path.abspath(__file__)) returns the directory name of the current file.
# By calling os.path.dirname() on this result three times, we get the directory name of the parent directory of the parent directory of the parent directory of the current file.
# Finally, we assign this result to BASE_DIR, which now contains the absolute path of the project directory.
# In Django, the BASE_DIR variable is commonly used to define other important paths in the project, such as the paths to the static files, media files, templates, and so on.

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

ENV = config('ENV', default='dev')
# This line of code retrieves the value of an environment variable named ENV using the config function from the python-decouple package. 
# If the ENV variable is not defined in the environment, the default value of 'dev' will be used.

#config('ENV', default='dev') calls the config function with two arguments: the name of the environment variable to retrieve ('ENV'), 
# and the default value to use if the variable is not defined ('dev').
#The config function is part of the python-decouple package, which provides a way to read settings from files and the environment 
# in a simple and consistent way.
#When config is called with an environment variable name, it looks for that variable in the environment and returns its value.
#  If the variable is not defined, it returns the default value instead.
#The value of ENV will be used later in the code to determine which settings to use for the current environment. For example, 
# you might have different settings for development, staging, and production environments, and use the ENV variable to select the appropriate settings.
# SECURITY WARNING: don't run with debug turned on in production!

SECRET_KEY = config('SECRET_KEY') 

DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1', cast=Csv())
#Csv values: https://pypi.org/project/python-decouple/ 
#csv (coma separated values)
#The key to using it with Django is that the csv module’s CSV-creation capability acts on file-like objects,
# and Django’s HttpResponse objects are file-like objects.
#cast, it is possible that it is being used as a verb meaning to convert or transform data from one type to another
#https://docs.djangoproject.com/en/4.2/howto/outputting-csv/

# Application definition

BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
#The contrib package stands for "contributed" and is a collection of applications that were not included in the core Django framework but were contributed by developers and users of Django. These applications are maintained by the Django community and are available for use under the same open-source license as Django itself.

#Some of the applications included in the django.contrib package include:

#admin: a powerful administrative interface for managing Django projects
#auth: a set of authentication and authorization tools for managing users and permissions
#contenttypes: a framework for associating generic content with models
#sessions: a session framework for managing user sessions
#messages: a framework for sending messages to users
#staticfiles: a framework for managing static files in a Django project
#sitemaps: a framework for generating sitemaps for search engines
#redirects: a framework for managing URL redirects
#To use an application from the django.contrib package, you need to add it to the INSTALLED_APPS setting in your Django project's settings file. For example, to use the admin application, you would add 'django.contrib.admin' to your INSTALLED_APPS setting.

LOCAL_APPS = [
    'apps.users',
    'apps.general',
    #'API.companies',
    #'API.cv',
]

THIRD_APPS = [
    'rest_framework',
    'naomi',
    #Django-naomi is a email backend for Django that let you preview email from your web browser instead of sending it using SMTP server.
    #  This is perfect for development environment that lack of SMTP server or you want to debug the email message
    'corsheaders', #https://pypi.org/project/django-cors-headers/
    'rest_framework.authtoken', #A simple token-based authentication backend for Django Rest Framework that stores 
    #cryptographically hashed tokens on the server-side. 
    # Unlike the upstream auth token implementation of Django Rest Framework, each login generates a new unique token,
    #  providing the ability to revoke (or log out) individual sessions rather than all at onces. Furthermore, 
    # only cryptographically hashed values of the tokens are stored on the server,
    #  thus a leak of the server-side auth token table does not allow an attacker to use any authenticated sessions. https://pypi.org/project/django-rest-authtoken/#:~:text=A%20simple%20token-based%20authentication%20backend%20for%20Django%20Rest,out%29%20individual%20sessions%20rather%20than%20all%20at%20onces.
    'drf_yasg', #drf_yasg provides a set of tools and utilities that make it easy to generate OpenAPI documentation for your DRF APIs.
     #It includes a set of views and serializers for generating OpenAPI schemas from your DRF views and serializers,
     #  as well as a set of templates for generating interactive documentation that can be viewed in a web browser.
]

INSTALLED_APPS = BASE_APPS + LOCAL_APPS + THIRD_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'curriculum_miri.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [config('TEMPLATES')], #Hay una variable de entorno que se llama TEMPLATES que a su vez redirecciona a la carpeta llamada templates donde hay template de html 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
#BACKEND: Specifies the backend for the template engine. In this case, it's the default Django backend.
#DIRS: A list of directories where the template engine should look for templates. The config('TEMPLATES') function call is used to retrieve a value from the configuration, which is assumed to be a string representing a directory path.
#APP_DIRS: If set to True, the template engine will also look for templates in the templates subdirectory of each installed Django app.
#OPTIONS: A dictionary of additional options for the template engine. In this case, it includes a list of context processors that will be used to populate the context of each template. The context processors included in this configuration are:
#django.template.context_processors.debug: Adds variables useful for debugging to the template context.
#django.template.context_processors.request: Adds the request object to the template context.
#django.contrib.auth.context_processors.auth: Adds variables related to the currently logged-in user to the template context.
#django.contrib.messages.context_processors.messages: Adds variables related to messages (e.g. success or error messages) to the template context.

WSGI_APPLICATION = 'curriculum_miri.wsgi.application' #el archivo wsgi sirve para el deploy 

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
#Django provides a flexible password storage system and uses PBKDF2 by default.

#The password attribute of a User object is a string in this format:

#<algorithm>$<iterations>$<salt>$<hash>
# PASSWORD MANAGEMENT IN DJANGO. The algorithm is one of a number of one-way hashing or password storage algorithms Django can use; 
# see below. Iterations describe the number of times the algorithm is run over the hash. 
# Salt is the random seed used and the hash is the result of the one-way function.
#https://docs.djangoproject.com/en/4.2/topics/auth/passwords/ LOOK FOR PASSWORD VALIDATORS TO SEE THE DESCRIPTIONS OF THE VALIDATORS 


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_TZ = True

DATE_INPUT_FORMATS = ('%d-%m-%Y', '%Y-%m-%d')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), )
#Websites generally need to serve additional files such as images, JavaScript, or CSS. 
# In Django, we refer to these files as “static files”.
#  Django provides django.contrib.staticfiles to help you manage them.
#STATIC_ROOT: Specifies the directory where Django will collect all static files from the app directories and other directories specified in STATICFILES_DIRS. This is used for serving static files in production environments, where it is not recommended to let Django serve static files directly. In this case, the os.path.join(BASE_DIR, 'staticfiles') function call is used to create a path to a directory called staticfiles inside the project's base directory.
#STATICFILES_DIRS: A tuple of directories that Django should also look for static files in, in addition to the app directories. In this case, the os.path.join(BASE_DIR, 'static') function call is used to create a path to a directory called static inside the project's base directory. This is typically used for static files that are not specific to a particular app, such as CSS or JavaScript files used across the entire site.
#Together, these settings allow Django to serve static files for the project during development and to collect all static files into a single directory for serving in production.

AUTH_USER_MODEL = 'users.User'
#https://docs.djangoproject.com/en/4.2/topics/auth/customizing/

MEDIA_URL = '/media/' #¿por qué separan static y media si ambos archivos son imágenes?
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

FRONT_DOMAIN = config('FRONT_DOMAIN', default="http://127.0.0.1")

EMAIL_HOST = config('EMAIL_HOST', default="smtp.host.com")
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default="user@host.com")
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default="password")
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)

if config('DEVELOPMENT', default=True, cast=bool):
    EMAIL_BACKEND = config('EMAIL_BACKEND')
    EMAIL_FILE_PATH = config('EMAIL_FILE_PATH')

TOKEN_EXPIRED_AFTER_SECONDS = config('TOKEN_EXPIRED_AFTER_SECONDS')

ADMIN_TOKEN_EXPIRED_AFTER_SECONDS = config('ADMIN_TOKEN_EXPIRED_AFTER_SECONDS', default=600000, cast=int)

CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default='False',
                                cast=bool)

if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', cast=Csv())

CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default='False', cast=bool)

CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='', cast=Csv())

APP_NAME = config('APP_NAME')

PASSWORD_RESET_TIMEOUT = config('PASSWORD_RESET_TIMEOUT', cast=int)

HOST_ROLES = config('HOST_ROLES')

URL_ACTIVATE = config('URL_ACTIVATE')

EMAIL_FEEDBACK = config('EMAIL_FEEDBACK')